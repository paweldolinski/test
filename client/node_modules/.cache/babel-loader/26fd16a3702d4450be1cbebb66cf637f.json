{"ast":null,"code":"var _jsxFileName = \"/Users/pawel/projects/react/mern/client/src/components/results/Results.js\";\nimport React, { useContext, useEffect } from \"react\";\nimport { RecipesContext } from \"../../context/RecipesContext\";\nimport PropTypes from \"prop-types\";\nimport uniqid from \"uniqid\";\nimport Result from \"../result/Result\";\nimport Modal from \"../modal/Modal\";\n\nconst Results = () => {\n  const {\n    data,\n    isModal,\n    recipeObj,\n    setIsBackground,\n    setMessage\n  } = useContext(RecipesContext);\n\n  const isVegeterian = recipe => {\n    if (recipe.recipe.healthLabels.indexOf(\"Vegetarian\") > -1) return recipe.vegeterian = true;\n  };\n\n  useEffect(() => {\n    if (data.length !== 0) setIsBackground(false);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"results\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"results__wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, data.map((recipe, index) => {\n    return /*#__PURE__*/React.createElement(Result, Object.assign({}, recipe.recipe, {\n      recipeObj: recipe,\n      bookmarked: recipe.bookmarked,\n      key: index,\n      id: recipe.id = uniqid(),\n      vegeterian: isVegeterian(recipe),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }\n    }));\n  })), isModal && /*#__PURE__*/React.createElement(Modal, {\n    isModal: isModal,\n    modalObj: recipeObj,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 19\n    }\n  }));\n};\n\nResults.propTypes = {\n  data: PropTypes.array,\n  isModal: PropTypes.bool,\n  recipeObj: PropTypes.object\n};\nexport default Results;","map":{"version":3,"sources":["/Users/pawel/projects/react/mern/client/src/components/results/Results.js"],"names":["React","useContext","useEffect","RecipesContext","PropTypes","uniqid","Result","Modal","Results","data","isModal","recipeObj","setIsBackground","setMessage","isVegeterian","recipe","healthLabels","indexOf","vegeterian","length","map","index","bookmarked","id","propTypes","array","bool","object"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;;AAEA,MAAMC,OAAO,GAAG,MAAM;AACpB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,SAAjB;AAA4BC,IAAAA,eAA5B;AAA6CC,IAAAA;AAA7C,MAA4DZ,UAAU,CAC1EE,cAD0E,CAA5E;;AAGA,QAAMW,YAAY,GAAIC,MAAD,IAAY;AAC/B,QAAIA,MAAM,CAACA,MAAP,CAAcC,YAAd,CAA2BC,OAA3B,CAAmC,YAAnC,IAAmD,CAAC,CAAxD,EACE,OAAQF,MAAM,CAACG,UAAP,GAAoB,IAA5B;AACH,GAHD;;AAIAhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,IAAI,CAACU,MAAL,KAAgB,CAApB,EAAuBP,eAAe,CAAC,KAAD,CAAf;AACxB,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,IAAI,CAACW,GAAL,CAAS,CAACL,MAAD,EAASM,KAAT,KAAmB;AAC3B,wBACE,oBAAC,MAAD,oBACMN,MAAM,CAACA,MADb;AAEE,MAAA,SAAS,EAAEA,MAFb;AAGE,MAAA,UAAU,EAAEA,MAAM,CAACO,UAHrB;AAIE,MAAA,GAAG,EAAED,KAJP;AAKE,MAAA,EAAE,EAAGN,MAAM,CAACQ,EAAP,GAAYlB,MAAM,EALzB;AAME,MAAA,UAAU,EAAES,YAAY,CAACC,MAAD,CAN1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF;AAUD,GAXA,CADH,CADF,EAeGL,OAAO,iBAAI,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAEA,OAAhB;AAAyB,IAAA,QAAQ,EAAEC,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfd,CADF;AAmBD,CA/BD;;AAiCAH,OAAO,CAACgB,SAAR,GAAoB;AAClBf,EAAAA,IAAI,EAAEL,SAAS,CAACqB,KADE;AAElBf,EAAAA,OAAO,EAAEN,SAAS,CAACsB,IAFD;AAGlBf,EAAAA,SAAS,EAAEP,SAAS,CAACuB;AAHH,CAApB;AAMA,eAAenB,OAAf","sourcesContent":["import React, { useContext, useEffect } from \"react\";\nimport { RecipesContext } from \"../../context/RecipesContext\";\nimport PropTypes from \"prop-types\";\nimport uniqid from \"uniqid\";\nimport Result from \"../result/Result\";\nimport Modal from \"../modal/Modal\";\n\nconst Results = () => {\n  const { data, isModal, recipeObj, setIsBackground, setMessage } = useContext(\n    RecipesContext\n  );\n  const isVegeterian = (recipe) => {\n    if (recipe.recipe.healthLabels.indexOf(\"Vegetarian\") > -1)\n      return (recipe.vegeterian = true);\n  };\n  useEffect(() => {\n    if (data.length !== 0) setIsBackground(false);\n  }, []);\n\n  return (\n    <div className=\"results\">\n      <ul className=\"results__wrapper\">\n        {data.map((recipe, index) => {\n          return (\n            <Result\n              {...recipe.recipe}\n              recipeObj={recipe}\n              bookmarked={recipe.bookmarked}\n              key={index}\n              id={(recipe.id = uniqid())}\n              vegeterian={isVegeterian(recipe)}\n            />\n          );\n        })}\n      </ul>\n      {isModal && <Modal isModal={isModal} modalObj={recipeObj} />}\n    </div>\n  );\n};\n\nResults.propTypes = {\n  data: PropTypes.array,\n  isModal: PropTypes.bool,\n  recipeObj: PropTypes.object,\n};\n\nexport default Results;\n"]},"metadata":{},"sourceType":"module"}