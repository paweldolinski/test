{"ast":null,"code":"var _jsxFileName = \"/Users/pawel/projects/react/mern/client/src/context/UserContext.js\";\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { setInStorage, getToken } from \"../utils/localStorage\";\nimport uniqid from \"uniqid\";\nimport env from \"dotenv\";\nexport const UserContext = createContext();\n\nconst UserProvider = props => {\n  const [userObj, setUserObj] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    likedArr: [],\n    id: \"\"\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  const onLoginHandler = async e => {\n    e.preventDefault();\n    setIsLoading(true);\n    const options = {\n      method: \"POST\",\n      body: JSON.stringify({\n        email: userObj.email,\n        password: userObj.password\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const response = await fetch(\"http://localhost:4000/user/login\", options);\n      const json = await response.json();\n\n      if (response.status === 200) {\n        const {\n          user,\n          token\n        } = json;\n        const {\n          name,\n          userId,\n          likedArr\n        } = user;\n        setInStorage(\"theMainApp\", {\n          token\n        });\n        setUserObj({ ...userObj,\n          name,\n          id: userId,\n          likedArr\n        });\n        setMessage(\"\");\n        setIsLoading(false);\n        setIsLoggedIn(true);\n      } else {\n        setMessage(json.message);\n        setIsLoading(false);\n        setIsLoggedIn(false);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const onLoginChangeHandler = e => {\n    setUserObj({ ...userObj,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const logOut = async () => {\n    const token = getToken();\n    setIsLoggedIn(true);\n    setIsLoading(true);\n    const options = {\n      method: \"GET\",\n      headers: {\n        authorization: token,\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const response = await fetch(`http://localhost:4000/user/logout`, options);\n      const json = await response.json();\n\n      if (response) {\n        setIsLoggedIn(false);\n        setIsLoading(false);\n        setInStorage(\"theMainApp\", {\n          token: \"\"\n        });\n        setUserObj({\n          name: \"\",\n          email: \"\",\n          likedArr: [],\n          id: \"\"\n        });\n        setMessage(json.message);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const addToFavorite = async obj => {\n    try {\n      if (!obj.bookmarked) {\n        obj.bookmarked = true;\n        obj.id = uniqid();\n      }\n\n      let isLiked = userObj.likedArr.filter(recipe => {\n        return recipe.dish.recipe.label === obj.recipe.label;\n      });\n      if (isLiked.length) return;\n      const response = fetch(\"http://localhost:4000/user/addToFavorite\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          dish: obj,\n          id: userObj.id\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const data = await response;\n\n      if (data.status === 200) {\n        setUserObj({ ...userObj,\n          likedArr: userObj.likedArr.concat({\n            dish: obj,\n            id: obj.id\n          })\n        });\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const removeFromFavorite = async id => {\n    try {\n      const response = fetch(\"http://localhost:4000/user/removeFromFavorite\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          dishId: id,\n          userId: userObj.id\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const data = await response;\n\n      if (data.status === 200) {\n        setUserObj({ ...userObj,\n          likedArr: userObj.likedArr.filter(recipe => recipe.id !== id)\n        });\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    const verifyUser = async () => {\n      const token = getToken();\n      setIsLoading(true);\n      if (token === \"\") return;\n\n      try {\n        const response = fetch(`http://localhost:4000/user/verify`, {\n          method: \"POST\",\n          headers: {\n            authorization: token,\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        const data = await response;\n        const json = await data.json();\n\n        if (data.status === 200) {\n          const {\n            name,\n            likedArr,\n            _id\n          } = json.user;\n          setUserObj({ ...userObj,\n            name,\n            likedArr,\n            id: _id\n          });\n          setIsLoggedIn(true);\n          setIsLoading(false);\n        }\n      } catch (err) {\n        console.log(err);\n        setIsLoggedIn(false);\n        setIsLoading(false);\n      }\n    };\n\n    verifyUser();\n  }, []);\n  return /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: {\n      userObj,\n      message,\n      isLoggedIn,\n      isLoading,\n      onLoginChangeHandler: onLoginChangeHandler,\n      onLoginHandler: onLoginHandler,\n      logOut: logOut,\n      addToFavorite: addToFavorite,\n      removeFromFavorite: removeFromFavorite,\n      setMessage: setMessage\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default UserProvider;","map":{"version":3,"sources":["/Users/pawel/projects/react/mern/client/src/context/UserContext.js"],"names":["React","createContext","useState","useEffect","setInStorage","getToken","uniqid","env","UserContext","UserProvider","props","userObj","setUserObj","name","email","password","likedArr","id","isLoading","setIsLoading","message","setMessage","isLoggedIn","setIsLoggedIn","onLoginHandler","e","preventDefault","options","method","body","JSON","stringify","headers","response","fetch","json","status","user","token","userId","err","console","log","onLoginChangeHandler","target","value","logOut","authorization","addToFavorite","obj","bookmarked","isLiked","filter","recipe","dish","label","length","data","concat","removeFromFavorite","dishId","verifyUser","_id","children"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport { setInStorage, getToken } from \"../utils/localStorage\";\nimport uniqid from \"uniqid\";\nimport env from \"dotenv\";\n\nexport const UserContext = createContext();\n\nconst UserProvider = (props) => {\n  const [userObj, setUserObj] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    likedArr: [],\n    id: \"\",\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  const onLoginHandler = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n    const options = {\n      method: \"POST\",\n      body: JSON.stringify({\n        email: userObj.email,\n        password: userObj.password,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n    try {\n      const response = await fetch(\"http://localhost:4000/user/login\", options);\n      const json = await response.json();\n      if (response.status === 200) {\n        const { user, token } = json;\n        const { name, userId, likedArr } = user;\n        setInStorage(\"theMainApp\", {\n          token,\n        });\n        setUserObj({ ...userObj, name, id: userId, likedArr });\n        setMessage(\"\");\n        setIsLoading(false);\n        setIsLoggedIn(true);\n      } else {\n        setMessage(json.message);\n        setIsLoading(false);\n        setIsLoggedIn(false);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const onLoginChangeHandler = (e) => {\n    setUserObj({\n      ...userObj,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const logOut = async () => {\n    const token = getToken();\n    setIsLoggedIn(true);\n    setIsLoading(true);\n    const options = {\n      method: \"GET\",\n      headers: {\n        authorization: token,\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    try {\n      const response = await fetch(\n        `http://localhost:4000/user/logout`,\n        options\n      );\n      const json = await response.json();\n      if (response) {\n        setIsLoggedIn(false);\n        setIsLoading(false);\n        setInStorage(\"theMainApp\", {\n          token: \"\",\n        });\n\n        setUserObj({\n          name: \"\",\n          email: \"\",\n          likedArr: [],\n          id: \"\",\n        });\n        setMessage(json.message);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const addToFavorite = async (obj) => {\n    try {\n      if (!obj.bookmarked) {\n        obj.bookmarked = true;\n        obj.id = uniqid();\n      }\n      let isLiked = userObj.likedArr.filter((recipe) => {\n        return recipe.dish.recipe.label === obj.recipe.label;\n      });\n      if (isLiked.length) return;\n\n      const response = fetch(\"http://localhost:4000/user/addToFavorite\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          dish: obj,\n          id: userObj.id,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      const data = await response;\n      if (data.status === 200) {\n        setUserObj({\n          ...userObj,\n          likedArr: userObj.likedArr.concat({ dish: obj, id: obj.id }),\n        });\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const removeFromFavorite = async (id) => {\n    try {\n      const response = fetch(\"http://localhost:4000/user/removeFromFavorite\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          dishId: id,\n          userId: userObj.id,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      const data = await response;\n      if (data.status === 200) {\n        setUserObj({\n          ...userObj,\n          likedArr: userObj.likedArr.filter((recipe) => recipe.id !== id),\n        });\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    const verifyUser = async () => {\n      const token = getToken();\n      setIsLoading(true);\n      if (token === \"\") return;\n      try {\n        const response = fetch(`http://localhost:4000/user/verify`, {\n          method: \"POST\",\n          headers: {\n            authorization: token,\n            \"Content-Type\": \"application/json\",\n          },\n        });\n\n        const data = await response;\n        const json = await data.json();\n        if (data.status === 200) {\n          const { name, likedArr, _id } = json.user;\n          setUserObj({\n            ...userObj,\n            name,\n            likedArr,\n            id: _id,\n          });\n          setIsLoggedIn(true);\n          setIsLoading(false);\n        }\n      } catch (err) {\n        console.log(err);\n        setIsLoggedIn(false);\n        setIsLoading(false);\n      }\n    };\n    verifyUser();\n  }, []);\n\n  return (\n    <UserContext.Provider\n      value={{\n        userObj,\n        message,\n        isLoggedIn,\n        isLoading,\n        onLoginChangeHandler: onLoginChangeHandler,\n        onLoginHandler: onLoginHandler,\n        logOut: logOut,\n        addToFavorite: addToFavorite,\n        removeFromFavorite: removeFromFavorite,\n        setMessage: setMessage,\n      }}\n    >\n      {props.children}\n    </UserContext.Provider>\n  );\n};\nexport default UserProvider;\n"]},"metadata":{},"sourceType":"module"}